<?xml version="1.0" encoding="UTF-8"?>
<!--跟标签beans，里面配置一个又一个的bean子标签，每一个bean子标签都代表一个类的配置-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">


    <context:component-scan base-package="com.mengma.edu"/>

    <!--id标识对象，class是类的全限定类名-->
    <!--scope：定义bean的作用范围
                singleton：单例，IOC容器中只有一个该类对象，默认为singleton
                prototype：原型(多例)，每次使用该类的对象（getBean），都返回给你一个新的对象，Spring只创建对象，不管理对象
    -->
    <!--<bean id="accountDao" class="com.mengma.edu.dao.impl.JdbcAccountDaoImpl" scope="singleton" init-method="init" destroy-method="destory">-->

        <!--&lt;!&ndash;name：按照参数名称注入，index按照参数索引位置注入&ndash;&gt;-->
        <!--<constructor-arg name="connectionUtils" ref="connectionUtils"/>-->
        <!--<constructor-arg name="name" value="zhangsan"/>-->
        <!--<constructor-arg name="sex" value="1"/>-->
        <!--<constructor-arg name="money" value="100.6"/>-->

        <!--&lt;!&ndash;set注入注入复杂数据类型&ndash;&gt;-->
        <!--<property name="myArray">-->
            <!--<array>-->
                <!--<value>array1</value>-->
                <!--<value>array2</value>-->
                <!--<value>array3</value>-->
            <!--</array>-->
        <!--</property>-->

        <!--<property name="myMap">-->
            <!--<map>-->
                <!--<entry key="key1" value="value1"/>-->
                <!--<entry key="key2" value="value2"/>-->
            <!--</map>-->
        <!--</property>-->

        <!--<property name="mySet">-->
            <!--<set>-->
                <!--<value>set1</value>-->
                <!--<value>set2</value>-->
            <!--</set>-->
        <!--</property>-->

        <!--<property name="myProperties">-->
            <!--<props>-->
                <!--<prop key="prop1">value1</prop>-->
                <!--<prop key="prop2">value2</prop>-->
            <!--</props>-->
        <!--</property>-->

    <!--</bean>-->

    <!--<bean id="transferService" class="com.mengma.edu.service.impl.TransferServiceImpl">-->
        <!--&lt;!&ndash;set+ name 之后锁定到传值的set方法了，通过反射技术可以调用该方法传入对应的值&ndash;&gt;-->
        <!--<property name="AccountDao" ref="accountDao"></property>-->
    <!--</bean>-->


    <!--事务管理器-->
    <!--<bean id="transactionManager" class="com.mengma.edu.utils.TransactionManager">-->
        <!--<property name="ConnectionUtils" ref="connectionUtils"/>-->
    <!--</bean>-->

    <!--代理对象工厂-->
    <!--<bean id="proxyFactory" class="com.mengma.edu.factory.ProxyFactory">-->
        <!--<property name="TransactionManager" ref="transactionManager"/>-->
    <!--</bean>-->


    <!--Spring ioc 实例化Bean的三种方式-->
    <!--方式一：使用无参构造器（推荐）-->
    <!--<bean id="connectionUtils" class="com.mengma.edu.utils.ConnectionUtils"></bean>-->

    <!--另外两种方式是为了我们自己new的对象加入到SpringIOC容器管理-->
    <!--方式二：静态方法-->
    <!--<bean id="connectionUtils" class="com.lagou.edu.factory.CreateBeanFactory" factory-method="getInstanceStatic"/>-->
    <!--方式三：实例化方法-->
    <!--<bean id="createBeanFactory" class="com.lagou.edu.factory.CreateBeanFactory"></bean>
    <bean id="connectionUtils" factory-bean="createBeanFactory" factory-method="getInstance"/>-->



    <!--lazy-init默认为false立即加载-->
    <bean id="accountPojo" class="com.mengma.edu.pojo.Account" lazy-init="true"/>



    <!-- 引入jdbc配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 使用spring初始化DataSource -->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
        <!--<property name="driverClass" value="${jdbc.driver}"></property>-->
        <!--<property name="jdbcUrl" value="${jdbc.url}"></property>-->
        <!--<property name="user" value="${jdbc.username}"></property>-->
        <!--<property name="password" value="${jdbc.password}"></property>-->
    <!--</bean>-->


    <!-- 使用JdbcTemplate封装DataSource -->
    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<property name="dataSource" ref="dataSource"></property>-->
    <!--</bean>-->



    <!-- 定义事务管理器 -->
    <!--<bean id="transactionManager"-->
          <!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource" />-->
    <!--</bean>-->
    <!--使用注释事务 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->

</beans>